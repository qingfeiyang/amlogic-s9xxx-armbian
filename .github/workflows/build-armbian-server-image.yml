name: Build Armbian for S905L3B

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      BOARD: "s905l3"
      RELEASE: "bullseye"
      KERNEL_VERSION: "6.1.147"
      DTB_URL: "https://raw.githubusercontent.com/ophub/amlogic-dtb/meson-gxl/meson-gxlx2-p295.dtb"
      DTB_FILE: "meson-gxlx2-p295.dtb"
      OUTPUT_DIR: "${{ github.workspace }}/armbian-build/output/images"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        # 添加必要的软件源
        sudo add-apt-repository universe -y
        sudo add-apt-repository multiverse -y
        sudo apt update -y
        
        # 修复：彻底清除所有容器相关包
        sudo apt purge -y containerd* docker* 
        sudo rm -rf /var/lib/docker /etc/docker
        sudo rm -f /etc/apparmor.d/docker
        sudo apt autoremove -y
        
        # 修复：手动安装containerd.io避免冲突
        wget https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/containerd.io_1.6.28-1_amd64.deb
        sudo dpkg -i containerd.io_1.6.28-1_amd64.deb
        
        # 安装完整的依赖包（排除冲突包）
        sudo apt install -y \
          build-essential git libncurses5-dev libssl-dev \
          bc flex bison libelf-dev liblz4-tool whiptail \
          parted kmod debootstrap qemu-user-static \
          dosfstools rsync u-boot-tools curl \
          wget xz-utils cpio \
          python3-dev python3-pip python3-setuptools \
          libpython3-dev libffi-dev \
          binfmt-support \
          device-tree-compiler \
          coreutils debootstrap systemd \
          docker.io docker-compose
        
        # 修复：配置docker无需containerd
        sudo mkdir -p /etc/docker
        echo '{"storage-driver": "vfs"}' | sudo tee /etc/docker/daemon.json
        
        # 验证关键工具
        for cmd in chroot debootstrap dtc docker; do
          if ! command -v $cmd; then
            echo "❌ $cmd 未安装成功"
            exit 1
          fi
        done

    - name: Prepare workspace
      run: |
        # 创建干净的构建目录结构
        mkdir -p armbian-build/userpatches/dtb
        
        # 下载DTB文件
        wget -O "armbian-build/userpatches/dtb/${{ env.DTB_FILE }}" "${{ env.DTB_URL }}"
        
        # 验证DTB文件
        if ! file "armbian-build/userpatches/dtb/${{ env.DTB_FILE }}" | grep -q "Device Tree Blob"; then
          echo "❌ DTB文件无效"
          exit 1
        fi
        echo "✅ DTB文件验证通过"

    - name: Clone Armbian build repository
      run: |
        cd armbian-build
        git clone --depth=1 https://github.com/armbian/build.git
        cd build
        
        # 验证仓库结构
        if [ ! -f compile.sh ]; then
          echo "❌ 仓库克隆失败"
          exit 1
        fi
        echo "✅ Armbian仓库克隆成功"

    - name: Run minimal build test
      run: |
        cd armbian-build/build
        
        # 执行最小化构建测试
        sudo ./compile.sh \
          BOARD="${{ env.BOARD }}" \
          BRANCH=current \
          RELEASE="${{ env.RELEASE }}" \
          KERNEL_ONLY=yes \
          KERNEL_CONFIGURE=no \
          BUILD_MINIMAL=yes \
          CLEAN_LEVEL="none" \
          USE_TORRENT=no \
          CUSTOM_DTB="../../userpatches/dtb/${{ env.DTB_FILE }}" \
          KERNELBRANCH="tag:v${{ env.KERNEL_VERSION }}" \
          LOG_OUTPUT_FILE="$GITHUB_WORKSPACE/build.log"
        
        # 检查退出状态
        if [ $? -ne 0 ]; then
          echo "❌ 最小化构建失败"
          echo "=== 构建日志最后50行 ==="
          tail -n 50 "$GITHUB_WORKSPACE/build.log" || echo "无日志文件"
          exit 1
        fi
        echo "✅ 最小化构建测试通过"

    - name: Full build
      run: |
        cd armbian-build/build
        
        # 执行完整构建
        sudo ./compile.sh \
          BOARD="${{ env.BOARD }}" \
          BRANCH=current \
          RELEASE="${{ env.RELEASE }}" \
          KERNEL_ONLY=no \
          KERNEL_CONFIGURE=no \
          BUILD_DESKTOP=no \
          CLEAN_LEVEL="none" \
          USE_TORRENT=no \
          CUSTOM_DTB="../../userpatches/dtb/${{ env.DTB_FILE }}" \
          KERNELBRANCH="tag:v${{ env.KERNEL_VERSION }}" \
          EXTRA_ARGUMENTS="USB_INIT=yes" \
          LOG_OUTPUT_FILE="$GITHUB_WORKSPACE/build.log"
        
        # 检查构建状态
        if [ $? -ne 0 ]; then
          echo "❌ 完整构建失败"
          echo "=== 构建日志最后50行 ==="
          tail -n 50 "$GITHUB_WORKSPACE/build.log"
          exit 1
        fi
        echo "✅ 完整构建成功"

    - name: Verify output
      run: |
        OUTPUT_DIR="${{ env.OUTPUT_DIR }}"
        
        # 检查输出目录
        if [ ! -d "$OUTPUT_DIR" ]; then
          echo "❌ 输出目录不存在: $OUTPUT_DIR"
          exit 1
        fi
        
        # 检查镜像文件
        IMAGE_FILES=$(ls "$OUTPUT_DIR"/*.img 2>/dev/null)
        if [ -z "$IMAGE_FILES" ]; then
          echo "❌ 未找到镜像文件"
          echo "目录内容:"
          ls -la "$OUTPUT_DIR"
          exit 1
        fi
        
        # 验证镜像文件
        for img in $IMAGE_FILES; do
          echo "🔍 验证镜像: $(basename "$img")"
          if ! file "$img" | grep -q "DOS/MBR boot sector"; then
            echo "❌ 镜像文件格式无效"
            exit 1
          fi
        done
        
        echo "✅ 镜像验证通过"
        echo "生成的镜像:"
        ls -lh "$OUTPUT_DIR"/*.img

    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: Armbian_S905L3B_Image
        path: ${{ env.OUTPUT_DIR }}/*.img
        retention-days: 30

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: Build_Failure_Logs
        path: |
          ${{ github.workspace }}/build.log
          ${{ github.workspace }}/armbian-build/build/output/logs
        retention-days: 7
